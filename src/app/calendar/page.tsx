"use client";
import { useState } from "react";
import HamburgerMenu from "@/app/components/HamburgerMenu";
import { Sun, Moon } from "lucide-react";
import Image from "next/image";

export default function CalendarPage() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [theme, setTheme] = useState<"light" | "dark">("light");
  const [selectedDate, setSelectedDate] = useState<string | null>(null);
  const [emotionData, setEmotionData] = useState<{
    [dateKey: string]: {
      emotion: string;
      longSummary: string;
      memo?: string;
    };
  }>({
    "2025-04-03": {
      emotion: "üòî Ïä¨Ìîî",
      longSummary: "Ï∂úÍ∑ºÍ∏∏Ïóê ÎπÑÎ•º ÎßûÏïÑ Í∏∞Î∂ÑÏù¥ Ï¢ãÏßÄ ÏïäÏïòÍ≥†, ÏóÖÎ¨¥ÎèÑ ÎßéÏïÑ ÏßÄÏ≥§Ïñ¥Ïöî. ÌïòÏßÄÎßå ÏßëÏóê ÏôÄÏÑú ÏùåÏïÖ Îì§ÏúºÎ©∞ Ï¢Ä ÎÇòÏïÑÏ°åÏñ¥Ïöî.",
    },
    "2025-04-04": {
      emotion: "üòä ÌñâÎ≥µ",
      longSummary: "Ïò§ÎûúÎßåÏóê ÏπúÍµ¨Î•º ÎßåÎÇò Ï¶êÍ±∞Ïö¥ ÏãúÍ∞ÑÏùÑ Î≥¥ÎÉàÍ≥†, ÎßõÏûàÎäî Ï†ÄÎÖÅÎèÑ Ìï®Íªò ÌñàÏñ¥Ïöî.",
    },
    "2025-04-05": {
      emotion: "üòä ÌñâÎ≥µ",
      longSummary: "Ïò§ÎäòÏùÄ Ï†ïÎßê ÏôÑÎ≤ΩÌïú ÌïòÎ£®ÏòÄÏñ¥Ïöî. ÏïÑÏπ®Î∂ÄÌÑ∞ ÌñáÏÇ¥Ïù¥ Ï¢ãÏïÑ Í∏∞Î∂Ñ Ï¢ãÍ≤å ÏùºÏñ¥ÎÇ¨Í≥†, ÏπúÍµ¨Îì§Í≥º ÏïΩÏÜçÏù¥ ÏûàÏñ¥ÏÑú Ïò§ÎûúÎßåÏóê ÏãúÎÇ¥Ïóê ÎÇòÍ∞îÏñ¥Ïöî. Ïπ¥ÌéòÏóêÏÑú Ìñ•Í∏ãÌïú Ïª§ÌîºÎ•º ÎßàÏãúÎ©∞ Îëê ÏãúÍ∞Ñ ÎÑòÍ≤å Ïù¥ÏïºÍ∏∞ÍΩÉÏùÑ ÌîºÏõ†Í≥†, Í∑∏ ÌõÑÏóêÎäî Í∑ºÏ≤ò Í≥µÏõêÏóê Í∞ÄÏÑú ÏÇ∞Ï±ÖÎèÑ ÌñàÏñ¥Ïöî. Î≤öÍΩÉÏù¥ ÏïÑÏßÅ Ï°∞Í∏à ÎÇ®ÏïÑ ÏûàÏñ¥ÏÑú ÏÇ¨ÏßÑÎèÑ ÎßéÏù¥ Ï∞çÍ≥†, ÏÑúÎ°úÏùò Í∑ºÌô©ÏùÑ ÎÇòÎàÑÎ©∞ Ïò§ÎûúÎßåÏóê ÍπäÏùÄ ÎåÄÌôîÎ•º ÎÇòÎàå Ïàò ÏûàÏñ¥ÏÑú Ï¢ãÏïòÏñ¥Ïöî. Ï†êÏã¨ÏùÄ Ï¢ãÏïÑÌïòÎçò Ïù¥ÌÉàÎ¶¨Ïïà Î†àÏä§ÌÜ†ÎûëÏóêÏÑú ÌååÏä§ÌÉÄÎûë ÌîºÏûêÎ•º Î®πÏóàÎäîÎç∞, Ïã†Î©îÎâ¥Í∞Ä ÏÉùÍ∞ÅÎ≥¥Îã§ ÎÑàÎ¨¥ ÎßõÏûàÏñ¥ÏÑú Í∞êÌÉÑÌñàÏñ¥Ïöî. Îã§ Î®πÍ≥† ÎÇòÏÑú Í∑ºÏ≤ò Ï±ÖÎ∞©Ïóê Îì§Î†ÄÎäîÎç∞, Ïò§Îûò Ï∞æÎçò ÏóêÏÑ∏Ïù¥Î•º Ïö∞Ïó∞Ìûà Î∞úÍ≤¨Ìï¥ÏÑú ÏßÑÏßú Ïö¥Ïù¥ Ï¢ãÎã§Í≥† ÎäêÍºàÏñ¥Ïöî. Ï±Ö ÎÉÑÏÉàÎèÑ Ï¢ãÏïòÍ≥†, Ï°∞Ïö©Ìïú Î∂ÑÏúÑÍ∏∞ÏóêÏÑú ÌòºÏûê ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥Îäî Í≤ÉÎèÑ ÌûêÎßÅÏù¥ÏóàÏñ¥Ïöî. Ï†ÄÎÖÅ Î¨¥Î†µÏóî Îã§Î•∏ ÏπúÍµ¨Îì§Ïù¥Îûë Ìï©Î•òÌï¥ÏÑú ÏûëÏùÄ ÌôàÌååÌã∞ÎèÑ Ïó¥ÏóàÏñ¥Ïöî. Í∞ÅÏûê ÎßåÎì† ÏùåÏãùÎì§ÏùÑ ÎÇòÎà† Î®πÍ≥†, Ï°∞Î™Ö ÏÇ¥Ïßù Ïñ¥Îë°Í≤å ÌïòÍ≥† Ï¢ãÏïÑÌïòÎäî ÏùåÏïÖ ÌãÄÏñ¥ÎÜìÍ≥† Ïù¥Îü∞Ï†ÄÎü∞ Ïù¥ÏïºÍ∏∞ ÎÇòÎàÑÎäî Í∑∏ Î∂ÑÏúÑÍ∏∞Í∞Ä Ï†ïÎßê Îî∞ÎúªÌñàÏñ¥Ïöî. Ïò§Îäò ÌïòÎ£® Ï¢ÖÏùº ÏõÉÏùÑ ÏùºÏù¥ ÎßéÏïòÍ≥†, ÎßàÏùåÎèÑ ÍΩâ Ï∞¨ ÎäêÎÇåÏù¥Îùº Í∏∞Î∂Ñ Ï¢ãÍ≤å ÌïòÎ£®Î•º ÎßàÎ¨¥Î¶¨Ìï† Ïàò ÏûàÏóàÏñ¥Ïöî. Ïù¥Îü∞ ÎÇ†ÏùÄ Ïò§ÎûúÎßåÏù¥Îùº Îçî Í∏∞ÏñµÏóê ÎÇ®ÏùÑ Í≤É Í∞ôÏïÑÏöî. ÏßÑÏßú, Ïò§Îäò Í∞ôÏùÄ ÌïòÎ£®Í∞Ä ÏûêÏ£º ÏûàÏóàÏúºÎ©¥ Ï¢ãÍ≤†Ïñ¥Ïöî.",
    },
    "2025-04-06": {
      emotion: "üòê Ï§ëÎ¶Ω",
      longSummary: "Î≥ÑÏùº ÏóÜÏóàÎã§.",
    },
    "2025-04-07": {
      emotion: "üò† Î∂ÑÎÖ∏",
      longSummary: "ÏßúÏ¶ùÎÇòÎäî ÏùºÏù¥ ÏûàÏóàÎã§.",
    },
    "2025-04-08": {
      emotion: "üòä ÌñâÎ≥µ",
      longSummary: "ÌñáÏÇ¥Ïù¥ Ï¢ãÏïÑ Í∏∞Î∂ÑÏù¥ Ï¢ãÏïòÏñ¥Ïöî.",
    },
    "2025-04-09": {
      emotion: "üòê Ï§ëÎ¶Ω",
      longSummary: "Î≥ÑÏùº ÏóÜÏù¥ ÌïòÎ£®Í∞Ä ÏßÄÎÇòÍ∞îÏñ¥Ïöî.",
    },
    "2025-04-10": {
      emotion: "üòî Ïä¨Ìîî",
      longSummary: "ÏïΩÍ∞Ñ Ïö∏Ï†ÅÌïú ÌïòÎ£®ÏòÄÏñ¥Ïöî.",
    },
    "2025-04-11": {
      emotion: "üòä ÌñâÎ≥µ",
      longSummary: "Ï¢ãÏùÄ ÏÜåÏãùÏùÑ Îì§Ïñ¥ÏÑú Í∏∞Îª§Ïñ¥Ïöî.",
    },
    "2025-04-12": {
      emotion: "üò≤ ÎÜÄÎûå",
      longSummary: "ÎúªÎ∞ñÏùò Ïó∞ÎùΩÏùÑ Î∞õÏïòÏñ¥Ïöî.",
    },
    "2025-04-13": {
      emotion: "üòê Ï§ëÎ¶Ω",
      longSummary: "Îî±Ìûà ÌäπÎ≥ÑÌïú Ïùº ÏóÜÎäî ÌèâÎ≤îÌïú ÌïòÎ£®.",
    },
    "2025-04-14": {
      emotion: "üò† Î∂ÑÎÖ∏",
      longSummary: "ÌöåÏùòÍ∞Ä Í∏∏Ïñ¥Ï†∏ÏÑú ÏßúÏ¶ùÎÇ¨Ïñ¥Ïöî.",
    },
    "2025-04-15": {
      emotion: "üòä ÌñâÎ≥µ",
      longSummary: "Ï¢ãÏïÑÌïòÎäî ÏùåÏïÖÏùÑ Îì§ÏúºÎ©∞ ÏÇ∞Ï±ÖÌñàÏñ¥Ïöî.",
    },
    "2025-04-16": {
      emotion: "üò® Í≥µÌè¨",
      longSummary: "ÍπúÏßù ÎÜÄÎûÑ ÏùºÏù¥ ÏûàÏóàÏñ¥Ïöî.",
    },
    "2025-04-17": {
      emotion: "üòê Ï§ëÎ¶Ω",
      longSummary: "Í∑∏Îü≠Ï†ÄÎü≠ Ïûò ÏßÄÎÇ∏ ÌïòÎ£®ÏòÄÏñ¥Ïöî.",
    },
    "2025-04-18": {
      emotion: "üòî Ïä¨Ìîî",
      longSummary: "Ï°∞Í∏à Ïö∞Ïö∏Ìïú Í∏∞Î∂ÑÏù¥ ÏûàÏóàÏñ¥Ïöî.",
    },
    "2025-04-19": {
      emotion: "üòä ÌñâÎ≥µ",
      longSummary: "ÎßõÏûàÎäî Í±∏ Î®πÏñ¥ÏÑú Í∏∞Î∂ÑÏù¥ Ï¢ãÏïòÏñ¥Ïöî.",
    },
    "2025-04-20": {
      emotion: "üò† Î∂ÑÎÖ∏",
      longSummary: "ÏùºÏù¥ Í≥ÑÌöçÎåÄÎ°ú Ïïà ÎèºÏÑú ÏßúÏ¶ùÎÇ¨Ïñ¥Ïöî.",
    },
    "2025-04-21": {
      emotion: "üòê Ï§ëÎ¶Ω",
      longSummary: "ÏùºÏÉÅÏ†ÅÏù∏ ÌïòÎ£®ÏòÄÏñ¥Ïöî.",
    },
    "2025-04-22": {
      emotion: "üòä ÌñâÎ≥µ",
      longSummary: "ÏπúÍµ¨Îûë Ïó∞ÎùΩÌïòÍ≥† Í∏∞Î∂ÑÏù¥ Ï¢ãÏïÑÏ°åÏñ¥Ïöî.",
    },
    "2025-04-23": {
      emotion: "üò≤ ÎÜÄÎûå",
      longSummary: "ÏÉùÍ∞ÅÏßÄÎèÑ Î™ªÌïú ÏÑ†Î¨ºÏùÑ Î∞õÏïòÏñ¥Ïöî.",
    },
    "2025-04-24": {
      emotion: "üò® Í≥µÌè¨",
      longSummary: "Ïñ¥ÎëêÏö¥ Í∏∏ÏóêÏÑú Î¨¥ÏÑúÏö¥ Í∏∞Î∂ÑÏù¥ Îì§ÏóàÏñ¥Ïöî.",
    },
    "2025-04-25": {
      emotion: "üòä ÌñâÎ≥µ",
      longSummary: "Ïò§ÎûúÎßåÏóê ÎßõÏûàÎäî Í±∏ Î®πÏóàÏñ¥Ïöî.",
    },
    "2025-04-26": {
      emotion: "üòê Ï§ëÎ¶Ω",
      longSummary: "Î≥ÑÏùº ÏóÜÎäî ÌïòÎ£®ÏòÄÏñ¥Ïöî.",
    },
    "2025-04-27": {
      emotion: "üòî Ïä¨Ìîî",
      longSummary: "Í∏∞Ïö¥Ïù¥ Ï¢Ä ÏóÜÎçò ÎÇ†Ïù¥ÏóàÏñ¥Ïöî.",
    },
  });

  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  const daysInMonth = new Date(year, month + 1, 0).getDate();
  const firstDay = new Date(year, month, 1).getDay();
  const weekdays = ["Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†"];
  const todayKey = new Date().toISOString().split("T")[0];

  const lightPalette = [
    { emotion: "Í≥µÌè¨", color: "#A0C4FF" },
    { emotion: "ÎÜÄÎûå", color: "#FFD6A5" },
    { emotion: "Î∂ÑÎÖ∏", color: "#FF6B6B" },
    { emotion: "Ïä¨Ìîî", color: "#BBD0FF" },
    { emotion: "Ï§ëÎ¶Ω", color: "#EAEAEA" },
    { emotion: "ÌñâÎ≥µ", color: "#FDFFB6" },
    { emotion: "ÌòêÏò§", color: "#C5DCA0" },
  ];

  const darkPalette = [
    { emotion: "Í≥µÌè¨", color: "#264653" },
    { emotion: "ÎÜÄÎûå", color: "#A68A64" },
    { emotion: "Î∂ÑÎÖ∏", color: "#9B1D20" },
    { emotion: "Ïä¨Ìîî", color: "#3A506B" },
    { emotion: "Ï§ëÎ¶Ω", color: "#6C757D" },
    { emotion: "ÌñâÎ≥µ", color: "#D4A373" },
    { emotion: "ÌòêÏò§", color: "#556B2F" },
  ];

  const palette = theme === "light" ? lightPalette : darkPalette;

  const getColorByEmotion = (emotion: string | undefined) => {
    if (!emotion) return theme === "light" ? "#fff" : "#1f2937";
    return palette.find((e) => emotion.includes(e.emotion))?.color || "#fff";
  };

  const changeMonth = (offset: number) => {
    const newDate = new Date(year, month + offset);
    setCurrentDate(newDate);
    setSelectedDate(null);
  };

  const emotionDatesThisMonth = Object.keys(emotionData).filter((dateStr) => {
    const [y, m] = dateStr.split("-").map(Number);
    return y === year && m === month + 1;
  });

  const getTreeImage = (): string => {
    const count = emotionDatesThisMonth.length;
    if (count >= 24) return "/images/tree-fruit.png";
    if (count >= 18) return "/images/tree-full.png";
    if (count >= 12) return "/images/tree-taller.png";
    if (count >= 6) return "/images/tree-growing.png";
    return "/images/tree-sprout.png"; // ‚úÖ Ìï≠ÏÉÅ ÏµúÏÜå ÏÉàÏãπ
  };

  return (
    <div
      className={`relative min-h-screen px-4 py-10 transition-colors duration-300
        ${theme === "light"
          ? "bg-gradient-to-br from-purple-100 via-blue-100 to-indigo-100 text-gray-800"
          : "bg-gradient-to-br from-gray-900 via-gray-800 to-gray-700 text-gray-100"
        }`}
    >
      <HamburgerMenu />

      <div className="flex flex-col md:flex-row gap-4 mt-20 w-full max-w-4xl justify-between items-start mx-auto">
        <div className="relative z-10 w-[350px]">
          <div className="flex items-center justify-center gap-4 mb-4">
            <button onClick={() => changeMonth(-1)} className="text-2xl hover:text-blue-400">
              &lt;
            </button>
            <h2 className="text-xl font-semibold">{year}ÎÖÑ {month + 1}Ïõî</h2>
            <button onClick={() => changeMonth(1)} className="text-2xl hover:text-blue-400">
              &gt;
            </button>
          </div>

          <div className="grid grid-cols-7 gap-2 text-sm text-center">
            {weekdays.map((day) => (
              <div key={day} className="font-bold">{day}</div>
            ))}
            {Array.from({ length: firstDay }).map((_, i) => (
              <div key={`empty-${i}`} />
            ))}
            {Array.from({ length: daysInMonth }, (_, i) => {
              const day = i + 1;
              const key = `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
              const bgColor = getColorByEmotion(emotionData[key]?.emotion);
              const isToday = key === todayKey;
              return (
                <div
                  key={key}
                  onClick={() => emotionData[key]?.longSummary && setSelectedDate(key)}
                  className={`relative w-10 h-10 rounded-md border flex items-center justify-center transition cursor-pointer
                    ${isToday ? "ring-2 ring-blue-400 font-bold border-0" : ""}`}
                  style={{ backgroundColor: bgColor }}
                >
                  {day}
                </div>
              );
            })}
          </div>
        </div>

        <div className="relative w-[350px] py-6">
          {selectedDate && emotionData[selectedDate] ? (
            <div
              className={`rounded-xl shadow-2xl p-5 text-sm z-40 max-h-[350px] overflow-y-auto
                ${theme === "light" ? "bg-white text-gray-800" : "bg-gray-800 text-gray-100"}`}
            >
              <div className="flex justify-between items-start mb-3">
                <div>
                  <p className="text-xs text-gray-500">{selectedDate}</p>
                  <p className="text-lg font-semibold mt-1">{emotionData[selectedDate].emotion}</p>
                </div>
                <button
                  onClick={() => setSelectedDate(null)}
                  className="text-gray-400 hover:text-gray-600 text-lg"
                >
                  √ó
                </button>
              </div>
              <div className="whitespace-pre-wrap break-words leading-relaxed text-sm mb-4">
                {emotionData[selectedDate].longSummary}
              </div>
              <label className="block text-xs font-semibold text-gray-500 mb-1">ÎÇ¥ Î©îÎ™®</label>
              <textarea
                className="w-full h-20 border border-gray-300 rounded-md p-2 text-sm mb-3 resize-none 
                  text-black dark:text-black bg-white dark:bg-white"
                placeholder="Ïù¥ÎÇ†Ïóê ÎäêÎÇÄ ÎÇòÎßåÏùò ÏÉùÍ∞ÅÏùÑ Ï†ÅÏñ¥ Î≥¥ÏÑ∏Ïöî."
                value={emotionData[selectedDate].memo || ""}
                onChange={(e) => {
                  const newMemo = e.target.value;
                  setEmotionData((prev) => ({
                    ...prev,
                    [selectedDate]: {
                      ...prev[selectedDate],
                      memo: newMemo,
                    },
                  }));
                }}
              />
              <button
                onClick={() => setSelectedDate(null)}
                className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 rounded"
              >
                Ï†ÄÏû•ÌïòÍ≥† Îã´Í∏∞
              </button>
            </div>
          ) : (
            <div className="w-full h-full flex flex-col items-center justify-center">
              <Image
                src={getTreeImage()}
                alt="Tree Growth Stage"
                width={300}
                height={300}
                className="transition-all"
              />
              {emotionDatesThisMonth.length > 0 && (
                <p className="mt-3 text-sm text-gray-500">
                  ÎÇòÎ¨¥Í∞Ä {emotionDatesThisMonth.length}ÏùºÏß∏ ÏûêÎùºÍ≥† ÏûàÏñ¥Ïöî.
                </p>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="relative h-28 mt-12 mb-4">
        <div className="fixed bottom-24 left-1/2 -translate-x-1/2 z-30 text-center">
          <button
            onClick={() => setTheme((prev) => (prev === "light" ? "dark" : "light"))}
            className={`inline-flex items-center justify-center w-10 h-10 rounded-full 
              transition hover:scale-105 mb-2 
              ${theme === "light" ? "bg-white/80 text-gray-700" : "bg-gray-600 text-gray-200"}`}
          >
            {theme === "light" ? (
              <Sun className="w-5 h-5 text-yellow-400" />
            ) : (
              <Moon className="w-5 h-5 text-gray-300" />
            )}
          </button>
          <p className="text-xl font-bold">
            Ïù¥Îã¨Ïóê Í∞êÏ†ïÏùÑ {emotionDatesThisMonth.length}Ïùº Í∏∞Î°ùÌïòÏÖ®Ïñ¥Ïöî.
          </p>
        </div>
      </div>
    </div>
  );
}
